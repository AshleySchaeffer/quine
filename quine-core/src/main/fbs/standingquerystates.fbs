include "base.fbs";
include "cypher.fbs";

namespace com.thatdot.quine.persistence;

// See [[com.thatdot.quine.graph.cypher.QueryContext]]
table QueryContext {
  columns: [string];
  values: [CypherValue];
}

// See [[com.thatdot.quine.graph.cypher.StandingQueryState]]
union MultipleValuesStandingQueryState {
  MultipleValuesUnitStandingQueryState,
  MultipleValuesCrossStandingQueryState,
  MultipleValuesLocalPropertyStandingQueryState,
  MultipleValuesLocalIdStandingQueryState,
  MultipleValuesSubscribeAcrossEdgeStandingQueryState,
  MultipleValuesEdgeSubscriptionReciprocalStandingQueryState,
  MultipleValuesFilterMapStandingQueryState,
  MultipleValuesAllPropertiesStandingQueryState,
}

// See [[com.thatdot.quine.graph.cypher.UnitState]]
table MultipleValuesUnitStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  result_id: StandingQueryResultId;
}


// See [[com.thatdot.quine.graph.cypher.CrossState]]
table MultipleValuesCrossStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  subscriptions_emitted: int;
  accumulated_results: [AccumulatedResults];
  result_dependency: [ResultDependency];
}

table AccumulatedResults {
  result: [MultipleValuesStandingQueryResult];
}

table MultipleValuesStandingQueryResult {
  result_id: StandingQueryResultId (required);
  result_values: QueryContext (required);
}

table ResultDependency {
  result_id: StandingQueryResultId (required);
  dependencies: [StandingQueryResultId];
}

// See [[com.thatdot.quine.graph.cypher.LocalPropertyState]]
table MultipleValuesLocalPropertyStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  result_id: StandingQueryResultId;
}

// See [[com.thatdot.quine.graph.cypher.LocalIdState]]
table MultipleValuesLocalIdStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  result_id: StandingQueryResultId;
}

// See [[com.thatdot.quine.graph.cypher.SubscribeAcrossEdgeState]]
table MultipleValuesSubscribeAcrossEdgeStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  edges_watched: [EdgeWatched] (required);
}

table EdgeWatched {
  half_edge: HalfEdge (required);
  query_part_id: MultipleValuesStandingQueryPartId (required);
  reverse_result_dependency: [ReverseResultDependency];
}

table ReverseResultDependency {
  dependency: StandingQueryResultId (required);
  result_id: StandingQueryResultId (required);
  result_values: QueryContext (required);
}

// See [[com.thatdot.quine.graph.cypher.EdgeSubscriptionReciprocalState]]
table MultipleValuesEdgeSubscriptionReciprocalStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  half_edge: HalfEdge (required);
  currently_matching: bool;
  reverse_result_dependency: [ReverseResultDependency];
  and_then_id: MultipleValuesStandingQueryPartId;
}

// See [[com.thatdot.quine.graph.cypher.FilterMapState]]
table MultipleValuesFilterMapStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  reverse_result_dependency: [ReverseResultDependency];
}

// See [[com.thatdot.quine.graph.cypher.AllPropertiesState]]
table MultipleValuesAllPropertiesStandingQueryState {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  result_id: StandingQueryResultId;
}

// See [[com.thatdot.quine.graph.messaging.StandingQueryMessage.CypherSubscriber]]
union MultipleValuesStandingQuerySubscriber {
  CypherNodeSubscriber,
  CypherGlobalSubscriber,
}

// See [[com.thatdot.quine.graph.messaging.StandingQueryMessage.MultipleValuesStandingQuerySubscriber.QuerySubscriber]]
table CypherNodeSubscriber {
  on_node: QuineId (required);
  query_part_id: MultipleValuesStandingQueryPartId (required);
  global_query_id: StandingQueryId (required);
}

// See [[com.thatdot.quine.graph.messaging.StandingQueryMessage.MultipleValuesStandingQuerySubscriber.GlobalSubscriber]]
table CypherGlobalSubscriber {
  global_query_id: StandingQueryId (required);
}

// See [[com.thatdot.quine.graph.behavior.StandingQuerySubscribers]]
table MultipleValuesStandingQuerySubscribers {
  query_part_id: MultipleValuesStandingQueryPartId (required);
  global_query_id: StandingQueryId (required);
  subscribers: [MultipleValuesStandingQuerySubscriber];
}

table MultipleValuesStandingQueryStateAndSubscribers {
  subscribers: MultipleValuesStandingQuerySubscribers (required);
  state: MultipleValuesStandingQueryState (required);
}
root_type MultipleValuesStandingQueryStateAndSubscribers;

